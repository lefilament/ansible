###############################################################################
# TEMPLATES.CFG - SAMPLE OBJECT TEMPLATES
#
#
# NOTES: This config file provides you with some example object definition
#        templates that are refered by other host, service, contact, etc.
#        definitions in other config files.
#
#        You don't need to keep these definitions in a separate file from your
#        other object definitions.  This has been done just to make things
#        easier to understand.
#
###############################################################################



###############################################################################
###############################################################################
#
# CONTACT TEMPLATES
#
###############################################################################
###############################################################################

# Generic contact definition template - This is NOT a real contact, just a template!

define contact{
        name                            generic-contact         ; The name of this contact template
        service_notification_period     heures-ouvres           ; service notifications can be sent anytime during working hours
        host_notification_period        heures-ouvres           ; host notifications can be sent anytime during working hours
        service_notification_options    w,u,c,r,f,s             ; send notifications for all service states, flapping events, and scheduled downtime events
        host_notification_options       d,u,r,f,s               ; send notifications for all host states, flapping events, and scheduled downtime events
        service_notification_commands   notify-service-by-email ; send service notifications via email
        host_notification_commands      notify-host-by-email    ; send host notifications via email
        register                        0                       ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL CONTACT, JUST A TEMPLATE!
        }




###############################################################################
###############################################################################
#
# HOST TEMPLATES
#
##############################################################################
#
###############################################################################

# Generic host definition template - This is NOT a real host, just a template!

define host{
        name                            generic-host    ; The name of this host template
        notifications_enabled           1               ; Host notifications are enabled
        event_handler_enabled           1               ; Host event handler is enabled
        flap_detection_enabled          1               ; Flap detection is enabled
        process_perf_data               1               ; Process performance data
        retain_status_information       1               ; Retain status information across program restarts
        retain_nonstatus_information    1               ; Retain non-status information across program restarts
        notification_period             24x7            ; Send host notifications at any time during working hours
        notification_interval           120             ; Resend notifications every 2 hours
        notification_options            d,u,r           ; Only send notifications for specific host states
        check_period                    24x7            ; By default, hosts are checked round the clock
        check_interval                  10              ; Actively check the host every 10 minutes
        retry_interval                  2               ; Schedule host check retries at 2 minute intervals
        max_check_attempts              3               ; Check each host 3 times (max)
        register                        0               ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL HOST, JUST A TEMPLATE!
        }


# Linux host definition template - This is NOT a real host, just a template!

define host{
        name                            linux-server     ; The name of this host template
        use                             generic-host     ; This template inherits other values from the generic-host template
        check_command                   check-host-alive ; Default command to check Linux hosts
        register                        0                ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL HOST, JUST A TEMPLATE!
        }


###############################################################################
###############################################################################
#
# SERVICE TEMPLATES
#
###############################################################################
###############################################################################

define servicegroup{
        servicegroup_name       web-services
        alias                   Services Web
        members                 {% for host in groups['odoo_server'] | sort %}{{ host }},Odoo {{ hostvars[host].odoo_url }},{% endfor %}{% for host in groups['owncloud_server'] | sort %}{{ host }},OwnCloud {{ hostvars[host].cloud_url }},{% endfor %}{% for host in groups['docker_odoo'] | sort %}{% if hostvars[host].odoo_prod is defined %}{{ host }},Odoo Server {{ hostvars[host].odoo_prod.url }},{% endif %}{% for instance in hostvars[host].odoo_nonprod_instances | default([]) %}{{ host }},{{ instance.name }} Server {{ instance['url'] }},{% endfor %}{% endfor %}{% for host in groups['docker_owncloud'] | union(groups['docker_nextcloud']) | sort %}{{ host }},Cloud Server {{ hostvars[host].cloud_url }},{% if hostvars[host].cloud_onlyoffice is defined %}{{ host }},OnlyOffice Server {{ hostvars[host].cloud_onlyoffice_url }},{% endif %}{% endfor %}{% for host in groups['docker_auth'] | sort %}{% if loop.index == loop.length %}{{ host }},PhpLdapAdmin {{ hostvars[host].ldap_url }},{{ host }},SSO Server {{ hostvars[host].sso_url }}{% else %}{{ host }},PhpLdapAdmin {{ hostvars[host].ldap_url }},{{ host }},SSO Server {{ hostvars[host].sso_url }},{% endif %}{% endfor %}

        }

define servicegroup{
        servicegroup_name       certificates
        alias                   Certificats
        members                 {% for host in groups['odoo_server'] | sort %}{{ host }},Certificate Odoo {{ hostvars[host].odoo_url }},{% endfor %}{% for host in groups['owncloud_server'] | sort %}{{ host }},Certificate OwnCloud {{ hostvars[host].cloud_url }},{% endfor %}{% for host in groups['docker_odoo'] | sort %}{% if hostvars[host].odoo_prod is defined %}{{ host }},Certificate Odoo Server {{ hostvars[host].odoo_prod.url }},{% endif %}{% for instance in hostvars[host].odoo_nonprod_instances | default([]) %}{{ host }},Certificate {{ instance.name }} Server {{ instance['url'] }},{% endfor %}{% endfor %}{% for host in groups['docker_owncloud'] | union(groups['docker_nextcloud']) | sort %}{{ host }},Certificate Cloud Server {{ hostvars[host].cloud_url }},{% if hostvars[host].cloud_onlyoffice is defined %}{{ host }},Certificate OnlyOffice Server {{ hostvars[host].cloud_onlyoffice_url }},{% endif %}{% endfor %}{% for host in groups['docker_auth'] | sort %}{% if loop.index == loop.length %}{{ host }},Certificate PhpLdapAdmin {{ hostvars[host].ldap_url }},{{ host }},Certificate SSO Server {{ hostvars[host].sso_url }}{% else %}{{ host }},Certificate PhpLdapAdmin {{ hostvars[host].ldap_url }},{{ host }},Certificate SSO Server {{ hostvars[host].sso_url }},{% endif %}{% endfor %}

        }

define servicegroup{
        servicegroup_name       linux-version
        alias                   Versions Linux
        members                 {{ groups['all'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Linux Version,') }},Linux Version
        }

define servicegroup{
        servicegroup_name       disk-utilisation
        alias                   Utilisation du disque
        members                 {{ groups['all'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Espace Disque,') }},Espace Disque
        }

define servicegroup{
        servicegroup_name       cpu-utilisation
        alias                   Utilisation CPU
        members                 {{ groups['all'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Charge CPU,') }},Charge CPU
        }

define servicegroup{
        servicegroup_name       ram-utilisation
        alias                   Utilisation RAM
        members                 {{ groups['all'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Charge RAM,') }},Charge RAM
        }

define servicegroup{
        servicegroup_name       fail2ban
        alias                   FAIL2BAN
        members                 {{ groups['all'] | difference(groups['physical_server']) | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Fail2ban,') }},Fail2ban
        }

define servicegroup{
        servicegroup_name       services
        alias                   Services
        members                 {{ groups['all'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',SSHD Service,') }},SSHD Service,{{ groups['odoo_server'] | union(groups['owncloud_server']) | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Nginx Service,') }},Nginx Service,{{ groups['odoo_server'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Odoo Service,') }},Odoo Service,{{ groups['owncloud_server'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Owncloud Service,') }},Owncloud Service,{{ groups['full_maintenance'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Filebeat Service,') }},Filebeat Service,{{ groups['all'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Services en cours,') }},Services en cours,Nagios Server,Nagios Service
        }

define servicegroup{
        servicegroup_name       ssh
        alias                   SSH
        members                 {{ groups['all'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',SSH,') }},SSH
        }

define servicegroup{
        servicegroup_name       connected-users
        alias                   Utilisateurs Connectes
        members                 {{ groups['all'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Utilisateurs Connectes,') }},Utilisateurs Connectes
        }

define servicegroup{
        servicegroup_name       docker_proxy
        alias                   Proxy Dockers
        members                 {{ groups['docker'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Docker Proxy,') }},Docker Proxy
        }

define servicegroup{
        servicegroup_name       docker_auth
        alias                   Auth Dockers
        members                 {{ groups['docker_auth'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Docker LDAP,') }},Docker LDAP,{{ groups['docker_auth'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Docker SSO,') }},Docker SSO
        }

define servicegroup{
        servicegroup_name       docker_odoo
        alias                   Odoo Dockers
        members                 {% for host in groups['docker_odoo'] | sort %}{% if hostvars[host].odoo_prod is defined %}{{ host }},Docker Odoo,{% endif %}{% for instance in hostvars[host].odoo_nonprod_instances | default([]) %}{{ host }},Docker {{ instance.name }},{% endfor %}{% endfor %}{{ groups['docker_odoo'] | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Docker Odoo Whitelists,') }},Docker Odoo Whitelists
        }

define servicegroup{
        servicegroup_name       docker_cloud
        alias                   Cloud Dockers
        members                 {{ groups['docker_owncloud'] | union(groups['docker_nextcloud']) | map('extract', hostvars, ['inventory_hostname']) | sort | join(',Docker Cloud,') }},Docker Cloud
        }

# Generic service definition template - This is NOT a real service, just a template!

define service{
        name                            generic-service         ; The 'name' of this service template
        active_checks_enabled           1                       ; Active service checks are enabled
        passive_checks_enabled          1                       ; Passive service checks are enabled/accepted
        parallelize_check               1                       ; Active service checks should be parallelized (disabling this can lead to major performance problems)
        obsess_over_service             1                       ; We should obsess over this service (if necessary)
        check_freshness                 0                       ; Default is to NOT check service 'freshness'
        notifications_enabled           1                       ; Service notifications are enabled
        event_handler_enabled           1                       ; Service event handler is enabled
        flap_detection_enabled          1                       ; Flap detection is enabled
        process_perf_data               1                       ; Process performance data
        retain_status_information       1                       ; Retain status information across program restarts
        retain_nonstatus_information    1                       ; Retain non-status information across program restarts
        is_volatile                     0                       ; The service is not volatile
        check_period                    24x7                    ; The service can be checked at any time of the day
        max_check_attempts              3                       ; Re-check the service up to 3 times in order to determine its final (hard) state
        check_interval                  10                      ; Check the service every 10 minutes under normal conditions
        retry_interval                  2                       ; Re-check the service every two minutes until a hard state can be determined
        contact_groups                  admins                  ; Notifications get sent out to everyone in the 'admins' group
        notification_options            w,u,c,r                 ; Send notifications about warning, unknown, critical, and recovery events
        notification_interval           120                     ; Re-notify about service problems every two hours
        notification_period             heures-ouvres           ; Notifications can be sent out at any time during working hours
        register                        0                       ; DONT REGISTER THIS DEFINITION - ITS NOT A REAL SERVICE, JUST A TEMPLATE!
        }


# Daily service definition template - This is NOT a real service, just a template!

define service{
        name                            daily-service
        use                             generic-service
        servicegroups                   certificates
        max_check_attempts              2
        check_interval                  1440
        retry_interval                  5
        notification_interval           1440
        register                        0
        }

# Hourly service definition template - This is NOT a real service, just a template!

define service{
        name                            hourly-service
        use                             generic-service
        max_check_attempts              2
        check_interval                  60
        retry_interval                  5
        notification_interval           120
        register                        0
        }

# Graph service definition template - This is NOT a real service, just a template!

define service {
        name                            graphed-service
        action_url                      /cgi-bin/show.cgi?host=$HOSTNAME$&service=$SERVICEDESC$' onMouseOver='showGraphPopup(this)' onMouseOut='hideGraphPopup()' rel='/cgi-bin/showgraph.cgi?host=$HOSTNAME$&service=$SERVICEDESC$&period=day&rrdopts=-w+450+-j
        register                        0
        }
