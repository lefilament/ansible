---

- name: Correct the machine hostname to "{{ inventory_hostname_short }}"
  hostname: name="{{ inventory_hostname_short | lower | regex_replace('_','')}}"

- name: Debian Update repo and upgrade installed packages
  apt:
    update_cache: yes
    upgrade: full
    autoremove: yes
    force: yes
    install_recommends: no
  async: 600
  poll: 20
  when: not ansible_check_mode and ansible_os_family == "Debian"

- name: Debian check Update repo and upgrade installed packages
  apt:
    update_cache: yes
    upgrade: full
    autoremove: yes
    force: yes
    install_recommends: no
  when: ansible_check_mode and ansible_os_family == "Debian"

- name: Remove unecessary Samba packages
  apt:
    name: samba*
    autoremove: yes
    purge: yes
    state: absent
  when: ansible_os_family == "Debian"

- name: Remove snap-related package
  apt:
    name: snapd
    autoremove: yes
    purge: yes
    state: absent
  when: ansible_os_family == "Debian"

- name: Remove snap directories
  file:
    path:
      - /root/snap
      - /home/{{ host_user }}/snap
      - /snap
      - /var/snap
      - /var/lib/snapd
    state: absent
  when: ansible_os_family == "Debian"

- name: Remove potentially harmfull unattended-upgrades
  apt:
    name: ['unattended-upgrades', 'popularity-contest', 'ubuntu-advantage-tools']
    autoremove: yes
    state: absent
  when: ansible_distribution == "Ubuntu"

- name: Remove unecessary samba hooks
  file:
    name: /etc/dhcp/dhclient-enter-hooks.d/samba
    state: absent
  when:  ansible_os_family == "Debian"

- name: RedHat Update repo and upgrade installed packages
  yum:
    update_cache: yes
    name: '*'
    state: latest
  when: ansible_os_family == "RedHat"

- name: Remove zabbix user if present
  user:
    name: zabbix
    remove: yes
    state: absent

- name: Create {{ host_user }} group
  group:
    name: "{{ host_user }}"

- name: Create {{ host_user }} user
  user:
    name: "{{ host_user }}"
    group: "{{ host_user }}"
    password: "{{ host_password | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
    generate_ssh_key: yes
    ssh_key_file: .ssh/id_ed25519
    ssh_key_type: ed25519
    shell: /bin/bash
  register: publickey

- name: Save public key to hostvars for SFTP
  local_action:
    module: lineinfile
    name: "host_vars/{{ inventory_hostname }}"
    regexp: "host_user_public_key:"
    line: "host_user_public_key: {{ publickey.ssh_public_key }}"
  connection: local
  become: no
  when: initial_playbook is not defined

- name: Create {{ host_user2 }} group
  group:
    name: "{{ host_user2 }}"
  when: host_user2 is defined

- name: Create {{ host_user2 }} user
  user:
    name: "{{ host_user2 }}"
    group: "{{ host_user2 }}"
    password: "{{ host_password2 | password_hash('sha512', 65534 | random(seed=inventory_hostname) | string) }}"
    generate_ssh_key: yes
    ssh_key_file: .ssh/id_ed25519
    ssh_key_type: ed25519
    shell: /bin/bash
  when: host_user2 is defined

- name: add user(s) in sudoers
  template:
    src: sudoers.j2
    dest: /etc/sudoers
    owner: root
    group: root
    mode: '440'
  tags: nrpe_config

- name: add public key to authorized keys for {{ host_user }}
  authorized_key:
    key: "{{ remi_depl_ssh_pubkey }}\n {{ benj_depl_ssh_pubkey }}\n {{ ju_depl_ssh_pubkey }}\n {{ mat_depl_ssh_pubkey }}\n {{ jordan_depl_ssh_pubkey }}{% if extra_public_key is defined %} \n {{ extra_public_key }}{% endif %}"
    user: "{{ host_user }}"
    exclusive: yes
  tags: sshd

- name: add public key to authorized keys for {{ host_user2 }}
  authorized_key:
    key: "{{ host_user2_pubkey }}"
    user: "{{ host_user2 }}"
    exclusive: yes
  when: host_user2 is defined and host_user2_pubkey is defined
  tags: sshd

- name: make sure /etc/ssh/ssh_host_ed25519_key exists
  stat:
    path: /etc/ssh/ssh_host_ed25519_key
  register: ssh_host_exists
  tags: sshd

- name: Generate /etc/ssh/ssh_host_ed25519_key if missing
  shell: ssh-keygen -A
  when: not ssh_host_exists.stat.exists and not ansible_check_mode
  tags: sshd

- name: Copy sshd_config file
  template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: '0644'
  notify: restart-sshd
  tags: sshd

- name: Copy bashrc file with session timeout
  copy:
    src: bash.bashrc
    dest: /etc/bash.bashrc
    owner: root
    group: root
    mode: '0644'
  when: ansible_os_family == "Debian"

- name: Add session timeout
  blockinfile:
    path: /etc/bashrc
    block: |
      TMOUT=900
      readonly TMOUT
      export TMOUT
  when: ansible_os_family == "RedHat"

- name: Copy Installed Package Listing script on server
  template:
    src: collect_installed_packages_facts_{{ ansible_os_family }}.sh.j2
    dest: /root/collect_installed_packages_facts.sh
    owner: root
    group: root
    mode: '0700'

- name: disable e-mailing of crontab
  cron:
    name: MAILTO
    env: yes
    job: ""

- name: add cron job to check installed packages every day
  cron:
    name: collect installed packages facts
    minute: "43"
    hour: "0"
    job: /root/collect_installed_packages_facts.sh
