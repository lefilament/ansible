---

#--------------------------------------------------
# System Settings
#--------------------------------------------------
- name: Create odoo system group
  group:
    name: "{{ odoo_user }}"
    system: yes
  tags: preinstall

- name: Create ODOO system user
  user:
    system: yes
    name: "{{ odoo_user }}"
    group: "{{ odoo_user }}"
  tags: preinstall

- name: Create Log directory
  file:
    name: /var/log/{{ odoo_user }}
    state: directory
    owner: "{{ odoo_user }}"
    group: "{{ odoo_user }}"
  tags: preinstall

- name: Install tool packages
  apt: 
    name: ['wget', 'git', 'bzr', 'bzrtools', 'python-pip', 'postgresql', 'postgresql-server-dev-all', 'python-all-dev', 'python-dev', 'python-pil', 'python-setuptools', 'libxml2-dev', 'libxslt1-dev', 'libevent-dev', 'libsasl2-dev', 'libldap2-dev', 'libffi-dev', 'pkg-config', 'libtiff5-dev', 'libjpeg8-dev', 'libjpeg-dev', 'zlib1g-dev', 'libfreetype6-dev', 'liblcms2-dev', 'liblcms2-utils', 'libwebp-dev', 'tcl8.6-dev', 'tk8.6-dev', 'python-tk', 'libyaml-dev', 'fontconfig', 'node-less', 'nodejs', 'duplicity']
    force: yes 
    install_recommends: no
  tags: preinstall

- name: Install wkhtmltox
  apt: deb="https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.{{ ansible_distribution_release }}_amd64.deb"
  tags: preinstall

- name: Install npm package
  apt: name="npm" install_recommends=no
  tags: preinstall

- name: Install less
  npm: global="yes" name="less"
  tags: preinstall

- name: Install less-plugin-clean-css
  npm: global="yes" name="less-plugin-clean-css"
  tags: preinstall

#--------------------------------------------------
# Install Bank export module
#--------------------------------------------------
- name: Clone Weboob GIT repo
  git: repo="https://git.weboob.org/weboob/weboob.git" version="master" dest="/root/weboob"
  when: banking is defined
  register: weboob
  tags: bank

- name: Install necessary python modules
  pip:
    name: ['prettytable', 'cssselect', 'html2text', 'unidecode', 'pbr', 'python-swiftclient', 'python-keystoneclient']
  when: banking is defined
  tags: bank

- name: Create Config directory
  file:
    name: /root/.config/weboob
    state: directory
  when: banking is defined
  tags: bank

- name: Copy configuration file
  template: src=backends.j2 dest=/root/.config/weboob/backends mode=0400
  when: banking is defined
  tags: bank

- name: Create OFX directory
  file:
    name: /ofx
    state: directory
    owner: "{{ odoo_user }}" 
    group: "{{ odoo_user }}"
  when: banking is defined
  tags: bank

- name: add cron job to get bank account every day
  cron:
    name: import bank moves
    minute: "30"
    hour: "20"
    job: /root/weboob/tools/local_run.sh boobank history {{ bank_account }} `date -d "last week" +\%Y-\%m-\%d` -f ofx | sed -n '/OFXHEADER/,$p' | sed 's/.*OFXHEADER/OFXHEADER/g' | sed 's/ACCTID>CPT/ACCTID>/g' > /ofx/bank_account_import.ofx ; chmod 444 /ofx/bank_account_import.ofx
  when: banking is defined
  tags: bank

- name: add cron job to get bank account 2 every day
  cron:
    name: import bank moves account 2
    minute: "50"
    hour: "20"
    job: /root/weboob/tools/local_run.sh boobank history {{ bank_account2 }} `date -d "last week" +\%Y-\%m-\%d` -f ofx | sed -n '/OFXHEADER/,$p' | sed 's/.*OFXHEADER/OFXHEADER/g' | sed 's/ACCTID>CPT/ACCTID>/g' > /ofx/bank_account2_import.ofx ; chmod 444 /ofx/bank_account2_import.ofx
  when: banking is defined and bank_account2 is defined
  tags: bank

- name: add cron job to get bank account 3 every day
  cron:
    name: import bank moves account 3
    minute: "10"
    hour: "21"
    job: /root/weboob/tools/local_run.sh boobank history {{ bank_account3 }} `date -d "last week" +\%Y-\%m-\%d` -f ofx | sed -n '/OFXHEADER/,$p' | sed 's/.*OFXHEADER/OFXHEADER/g' | sed 's/ACCTID>CPT/ACCTID>/g' > /ofx/bank_account3_import.ofx ; chmod 444 /ofx/bank_account3_import.ofx
  when: banking is defined and bank_account3 is defined
  tags: bank

- name: add cron job to get bank 2 account every day
  cron:
    name: import bank 2 moves
    minute: "25"
    hour: "20"
    job: /root/weboob/tools/local_run.sh boobank history {{ bank2_account }} `date -d "last week" +\%Y-\%m-\%d` -f ofx | sed -n '/OFXHEADER/,$p' | sed 's/.*OFXHEADER/OFXHEADER/g' | sed 's/ACCTID>CPT/ACCTID>/g' > /ofx/bank2_account_import.ofx ; chmod 444 /ofx/bank2_account_import.ofx
  when: banking is defined and bank2_account is defined
  tags: bank

- name: add cron job to get bank 2 account 2 every day
  cron:
    name: import bank 2 moves account 2
    minute: "45"
    hour: "20"
    job: /root/weboob/tools/local_run.sh boobank history {{ bank2_account2 }} `date -d "last week" +\%Y-\%m-\%d` -f ofx | sed -n '/OFXHEADER/,$p' | sed 's/.*OFXHEADER/OFXHEADER/g' > /ofx/bank2_account2_import.ofx ; chmod 444 /ofx/bank2_account2_import.ofx
  when: banking is defined and bank2_account2 is defined
  tags: bank

#--------------------------------------------------
# Install ODOO
#--------------------------------------------------
- name: Download ODOO Server
  git: depth="1" version="{{ odoo_version }}" repo="https://www.github.com/odoo/odoo" dest="{{ odoo_home }}" 

- name: Create custom module directory
  file: state=directory name="{{ odoo_home }}/custom/addons" 

- name: Setting permissions on home folder
  file: state=directory name="{{ odoo_home }}" recurse="yes" owner="{{ odoo_user }}" group="{{ odoo_user }}"

#--------------------------------------------------
# Install Dependencies
#--------------------------------------------------
- name: Install tool packages from odoo/doc
  pip:  requirements="{{ odoo_home }}/doc/requirements.txt"

- name: Install tool packages from odoo
  pip:  requirements="{{ odoo_home }}/requirements.txt"

- name: Install WTForms, pysftp, suds and pyopenssl
  pip:  
    name: "['WTForms', 'pysftp', 'suds', 'pyopenssl]"

#--------------------------------------------------
# Configure PostgreSQL Server
#--------------------------------------------------
- name: Creating the ODOO PostgreSQL User
  postgresql_user: name="{{ odoo_user }}" role_attr_flags="CREATEDB,NOSUPERUSER"
  become: yes
  become_user: postgres
  tags: preinstall

#--------------------------------------------------
# Adding ODOO as a deamon 
#--------------------------------------------------
- name: Create Odoo daemon service 
  template: src=odoo-server.service.j2 dest="/lib/systemd/system/{{ odoo_config_name }}.service" mode=0644 owner=root
  notify: restart-odoo

- name: Systemd daemon reload
  systemd: daemon-reload=yes

- name: Make odoo to start with system 
  service: name="{{ odoo_config_name }}" enabled=yes

#--------------------------------------------------
# Configure ODOO
#--------------------------------------------------
- name: Odoo config file
  template: src=odoo-server.conf.j2 dest="/etc/{{ odoo_config_name }}.conf" owner="{{ odoo_user }}" group="{{ odoo_user }}" mode=0640
  notify: restart-odoo

#--------------------------------------------------
# Configure ODOO custom modules
#--------------------------------------------------
- name: Install Odoo custom modules in {{ odoo_home }}/custom/addons
  git: repo="https://sources.le-filament.com/lefilament/{{ item }}.git" dest="{{ odoo_home }}/custom/addons/{{ item | basename }}" version="{{ odoo_version }}"
  with_items: "{{ odoo_custom_modules | default([]) }}"
  when: odoo_custom_modules is defined
  notify: restart-odoo
  tags: custom,lf

- name: Clone OCA custom repo
  git: repo="https://github.com/OCA/{{ item.repo }}.git" dest="{{ odoo_home }}/custom/addons/{{ item.repo }}-oca" version="{{ odoo_version }}"
  with_items: "{{ odoo_custom_modules_oca }}"
  notify: restart-odoo
  tags: custom,oca

- name: Create links to OCA custom repos
  file: state=link src="{{ odoo_home }}/custom/addons/{{ item.0.repo }}-oca/{{ item.1 }}" dest="{{ odoo_home }}/custom/addons/{{ item.1 }}"
  with_subelements:
    - "{{ odoo_custom_modules_oca }}"
    - modules
  notify: restart-odoo
  tags: custom,oca

- name: Clone OCA OFX
  git: repo="https://github.com/OCA/{{ item.repo }}.git" dest="{{ odoo_home }}/custom/addons/{{ item.repo }}-oca" version="9.0_port_account_bank_statement_import_ofx"
  with_items: "{{ odoo_custom_modules_ofx }}"
  notify: restart-odoo
  when: odoo_custom_modules_ofx is defined
  tags: custom,ofx

- name: Create links to OFX custom repos
  file: state=link src="{{ odoo_home }}/custom/addons/{{ item.0.repo }}-oca/{{ item.1 }}" dest="{{ odoo_home }}/custom/addons/{{ item.1 }}"
  with_subelements:
    - "{{ odoo_custom_modules_ofx }}"
    - modules
  when: odoo_custom_modules_ofx is defined
  notify: restart-odoo
  tags: custom,ofx

- name: Setting permissions on home folder
  file: state=directory name="{{ odoo_home }}/custom/addons" recurse="yes" owner="{{ odoo_user }}" group="{{ odoo_user }}"
  notify: restart-odoo
  tags: custom,oca,ofx,lf

#--------------------------------------------------
# Install NGINX
#--------------------------------------------------
- name: Install Nginx Server
  apt: name="nginx" install_recommends=no
  tags: proxy

- name: Nginx started
  service: name="nginx" state=started
  tags: proxy

#--------------------------------------------------
# Install LETSENCRYPT
#--------------------------------------------------

- name: update apt repository with certbot one
  apt_repository: repo="ppa:certbot/certbot"
  tags: certificate,proxy

- name: install certbot for nginx
  apt: name=python3-certbot-nginx update_cache=yes force=yes install_recommends=no
  tags: certificate,proxy

- name: install certificate
  shell: "certbot --nginx -n --domains {{ odoo_url }} --agree-tos -m {{ maintenance_email }}"
  tags: certificate,proxy
  when: www_site is not defined and odoo_url2 is not defined

- name: install certificate
  shell: "certbot --nginx -n --domains {{ odoo_url }} --domains www.{{ odoo_url }} --agree-tos -m {{ maintenance_email }}"
  tags: certificate,proxy
  when: www_site is defined and odoo_url2 is not defined

- name: install certificate
  shell: "certbot --nginx -n --domains {{ odoo_url }} --domains {{ odoo_url2 }} --agree-tos -m {{ maintenance_email }}"
  tags: certificate,proxy
  when: odoo_url2 is defined

- name: add cron job to renew certificate every monday
  cron: 
    name: renew certificate
    minute: "30"
    hour: "2"
    weekday: "1"
    job: certbot renew --nginx >> /var/log/le-renew.log 
  tags: certificate,proxy

#--------------------------------------------------
# NGINX Configuration
#--------------------------------------------------
- name: Configure Nginx
  template: src=odoo.j2 dest="/etc/nginx/sites-available/odoo"
  notify: restart nginx
  tags: proxy

- name: "Enable nginx configuration"
  file: src="/etc/nginx/sites-available/odoo" dest="/etc/nginx/sites-enabled/odoo" state=link
  notify: restart nginx
  tags: proxy

- name: Remove default Nginx configuration
  file: path="/etc/nginx/sites-enabled/default" state=absent
  notify: restart nginx
  tags: proxy

#--------------------------------------------------
# Backup Configuration
#--------------------------------------------------
- name: Backup script
  template:
    src: backup.sh.j2
    dest: /root/backup-odoo.sh
    mode: '0700'
    owner: root
    group: root
  when: inventory_hostname in groups['maintenance_contract']

- name: add cron job to perform backup
  cron:
    name: Backup Odoo
    minute: "45"
    hour: "1"
    job: /root/backup-odoo.sh
  when: inventory_hostname in groups['maintenance_contract']
